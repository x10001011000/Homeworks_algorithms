# Complexity : time = O(N?) # из-за перебора, memory = O() 


class GuestChecking:
  def __init__(self, guests): # на вход дается список кортежей
    self.guests = guests
    self.day_max = ''

  def new_guest(self, check_in, check_out):
    '''Имеем возможность добавить дату заселения и выселения нового гостя'''
    self.guests.append((check_in, check_out))

  def date_range():
# мб + count?, ее бы инкапсулировать
    list_for_count = []
    for date in self.guests:
      # получим 1 кортеж a,b = *date
      # расширим его , диапазон от до, заполнение промежутка мб из библиотеки? from a to b



      # загоняю все в один список 

      
      # считаем количество каждой уникальной даты в списке 
      

  def finding_max():
    
    print('Самый загруженный гостями день за период:', ) # как бы сюда засунуть его 

# для расчета периодов импорт структуры данных дата 
# для каждого кортежа сделать диапазон дат. 
# добавить каждое значение в словарь. в словарь добавляются countы, где ключ = дата, а значение = count
# находим максимальный count


