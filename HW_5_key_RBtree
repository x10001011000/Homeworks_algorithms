# Complexity time = O(logN), memory = O(N)

class RBTreeNode:
    def __init__(self, key, value, color="red", left=None, right=None, parent=None):
        self.key = key      # Ключ узла
        self.value = value  # Значение узла
        self.color = color  # Цвет узла ("red" или "black")
        self.left = left    # Левый ребенок
        self.right = right  # Правый ребенок
        self.parent = parent  # Родительский узел


class RBTreeMap:
    def __init__(self):
        self.nil = RBTreeNode(key=None, value=None, color="black")  # NIL узел
        self.root = self.nil

    def add(self, key, value):
        """
        Добавляет новый узел с заданным ключом и значением в дерево и выполняет балансировку.
        :param key: Ключ нового узла
        :param value: Значение нового узла
        """
        node = RBTreeNode(key, value, left=self.nil, right=self.nil, parent=None)
        parent = None
        current = self.root

        while current != self.nil:
            parent = current
            if node.key < current.key:
                current = current.left
            else:
                current = current.right

        node.parent = parent
        if parent is None:  # Если дерево пусто
            self.root = node
        elif node.key < parent.key:
            parent.left = node
        else:
            parent.right = node

        node.color = "red"
        self._balance_after_add(node)

    def _balance_after_add(self, node):
        """
        Балансирует дерево после добавления нового узла.
        :param node: Новый узел
        """
        while node != self.root and node.parent.color == "red":
            if node.parent == node.parent.parent.left:
                sibling = node.parent.parent.right
                if sibling.color == "red":
                    # Случай 1: Перекрашивание
                    node.parent.color = "black"
                    sibling.color = "black"
                    node.parent.parent.color = "red"
                    node = node.parent.parent
                else:
                    if node == node.parent.right:
                        # Случай 2: Левый поворот
                        node = node.parent
                        self._rotate_left(node)
                    # Случай 3: Правый поворот
                    node.parent.color = "black"
                    node.parent.parent.color = "red"
                    self._rotate_right(node.parent.parent)
            else:
                sibling = node.parent.parent.left
                if sibling.color == "red":
                    # Случай 1: Перекрашивание
                    node.parent.color = "black"
                    sibling.color = "black"
                    node.parent.parent.color = "red"
                    node = node.parent.parent
                else:
                    if node == node.parent.left:
                        # Случай 2: Правый поворот
                        node = node.parent
                        self._rotate_right(node)
                    # Случай 3: Левый поворот
                    node.parent.color = "black"
                    node.parent.parent.color = "red"
                    self._rotate_left(node.parent.parent)
        self.root.color = "black"

    def _rotate_left(self, node):
        """
        Выполняет левый поворот вокруг узла.
        :param node: Узел для поворота
        """
        pivot = node.right
        node.right = pivot.left
        if pivot.left != self.nil:
            pivot.left.parent = node
        pivot.parent = node.parent
        if node.parent is None:
            self.root = pivot
        elif node == node.parent.left:
            node.parent.left = pivot
        else:
            node.parent.right = pivot
        pivot.left = node
        node.parent = pivot

def _rotate_right(self, node):
        """
        Выполняет правый поворот вокруг узла.
        :param node: Узел для поворота
        """
        pivot = node.left
        node.left = pivot.right
        if pivot.right != self.nil:
            pivot.right.parent = node
        pivot.parent = node.parent
        if node.parent is None:
            self.root = pivot
        elif node == node.parent.right:
            node.parent.right = pivot
        else:
            node.parent.left = pivot
        pivot.right = node
        node.parent = pivot

    def find(self, key):
        """
        Ищет значение по ключу в дереве.
        :param key: Ключ для поиска
        :return: Значение узла или None, если ключ отсутствует
        """
        current = self.root
        while current != self.nil:
            if key == current.key:
                return current.value
            elif key < current.key:
                current = current.left
            else:
                current = current.right
        return None

    def show(self, node, depth=0):
        """
        Отображает дерево в виде отступов, отражающих уровни.
        :param node: Узел, с которого начинается отображение
        :param depth: Глубина узла для отступов
        """
        if node != self.nil:
            self.show(node.right, depth + 1)
            print("    " * depth + f"[{node.key}: {node.value} ({node.color})]")
            self.show(node.left, depth + 1)
