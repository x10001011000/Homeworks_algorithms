# Complexity time O(logN), memory O(logN)

class RBTNode:
    def init(self, value, color="red", left=None, right=None, parent=None):
        self.value = value  # Значение узла
        self.color = color  # Цвет узла ("red" или "black")
        self.left = left    # Левый потомок
        self.right = right  # Правый потомок
        self.parent = parent  # Родительский узел


class RedBlackTree:
    def init(self):
        self.nil = RBTNode(value=None, color="black")  # NIL узел
        self.root = self.nil

    def add(self, value):
        """
        Добавляет значение в красно-черное дерево и выполняет балансировку.
        :param value: Новое значение для добавления
        """
        node = RBTNode(value, left=self.nil, right=self.nil, parent=None)
        parent = None
        current = self.root

        while current != self.nil:
            parent = current
            if node.value < current.value:
                current = current.left
            else:
                current = current.right

        node.parent = parent
        if parent is None:  # Дерево изначально пусто
            self.root = node
        elif node.value < parent.value:
            parent.left = node
        else:
            parent.right = node

        node.color = "red"
        self._balance_after_insert(node)

    def _balance_after_insert(self, node):
        """
        Балансировка дерева после добавления нового узла.
        :param node: Узел, который был добавлен
        """
        while node != self.root and node.parent.color == "red":
            if node.parent == node.parent.parent.left:
                uncle = node.parent.parent.right
                if uncle.color == "red":
                    # Случай 1: Перекрашивание
                    node.parent.color = "black"
                    uncle.color = "black"
                    node.parent.parent.color = "red"
                    node = node.parent.parent
                else:
                    if node == node.parent.right:
                        # Случай 2: Левый поворот
                        node = node.parent
                        self._rotate_left(node)
                    # Случай 3: Правый поворот
                    node.parent.color = "black"
                    node.parent.parent.color = "red"
                    self._rotate_right(node.parent.parent)
            else:
                uncle = node.parent.parent.left
                if uncle.color == "red":
                    # Случай 1: Перекрашивание
                    node.parent.color = "black"
                    uncle.color = "black"
                    node.parent.parent.color = "red"
                    node = node.parent.parent
                else:
                    if node == node.parent.left:
                        # Случай 2: Правый поворот
                        node = node.parent
                        self._rotate_right(node)
                    # Случай 3: Левый поворот
                    node.parent.color = "black"
                    node.parent.parent.color = "red"
                    self._rotate_left(node.parent.parent)
        self.root.color = "black"

    def _rotate_left(self, node):
        """
        Выполняет левый поворот вокруг указанного узла.
        :param node: Узел для поворота
        """
        pivot = node.right
        node.right = pivot.left
        if pivot.left != self.nil:
            pivot.left.parent = node
        pivot.parent = node.parent
        if node.parent is None:
            self.root = pivot
        elif node == node.parent.left:
            node.parent.left = pivot
        else:
            node.parent.right = pivot
        pivot.left = node
        node.parent = pi
